MVC (Model - View - Controller)

#1 Pendahuluan ===========================

MVC menerapkan model OOP.
MVC ,adalah pola arsitektur pada perancangan perangkat lunak berorientasi object.
Tujuan dari MVC : untuk memisahkan antara TAMPILAN, DATA dan PROSES.

Model(Data) -- 
    > Representasi Pengetahuan
    > Mengelola Data
    > Logika Bisnis
Controller(Proses) -- 
    > Perantara antara Model dan View
    > Menangani Pemrosesan pada aplikasi
    > Menangani Aksi dari user
View(Tampilan) --
    > Output
    > Representasi visual dari model
    > Tampilan 

Kenapa MVC?
    > Organisasi dan Struktur kode yang baik.
    > Pemisah Logic dan Tampilan.
    > Mempermudah dalam Maintenance Code.
    > Mengimplementasi Konsep OOP.
    > Digunakan oleh Web Application Framework.


#2 Persiapan ===========================
Membuat sebuah folder Public (untuk menyimpan css, js dan image).
    > membuat file utama yang akan diakses oleh user - index.php

Membuat sebuah folder App 
    > folder core (sebagai inti dari mvc - membuat file untuk mengelola routing)
        > membuat file App.php dan Controller.php
    > folder controllers
    > folder views (berisi antarmuka yang akan disajikan oleh controllers)
        membuat sub folder lagi untuk menyimpan kumpulan kumpulan views sesuai dengan controller yg memanggilnya nanti
        > folder home
        > membuat file init.php sebagai file bootstraping
    > folder models


*class yang ada di dalam Folder controllers akan extends ke class Controller.php


#3 Routing ===========================

Melakukan konfigurasi url menggunakan file .htaccess
htaccess adalah file untuk memodifikasi konfigurasi dari server apache (dapat dilakukan perfolder).
Membuat file .htaccess untuk folder app dan public

Memecah url menjadi array dan mengahpus / terakhir


#4 Controller ===========================

membuat property default di App.php
membuat class Home.php dan About.php di controllers dan membuat Class beserta Method default

di dalam App membuat controller dan method default.
dan melakukan sesuatu jika parameter kosong, hingga mengambil data di url untuk menangkap parameternya.


#5 View ===========================

Akan merubah isi dari tiap tiap method di controllernya (About.php & Home.php)
yang akan memanggil folder views

Menggunakan Controller.php sebagai fungsi untuk mengirimkan url dan memanggil views
sekarang tiap class About dan Home menjadi child class dari Controller dan akan menerima data

Class About dan Home akan memanggil Method view di Controller.php dan akan menampilkan halaman html untuk about dan home sekalian juga mengirimkan data ke halaman tersebut.
Di folder about dan home dalam views akan menerima data dan menampilkan tampilan utama halaman tersebut.

Memisahkan header dan footer di setiap halamannya agar tidak melakukan perulangan code.