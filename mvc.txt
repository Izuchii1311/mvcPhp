MVC (Model - View - Controller)

#1 Pendahuluan ===========================

MVC menerapkan model OOP.
MVC ,adalah pola arsitektur pada perancangan perangkat lunak berorientasi object.
Tujuan dari MVC : untuk memisahkan antara TAMPILAN, DATA dan PROSES.

Model(Data) -- 
    > Representasi Pengetahuan
    > Mengelola Data
    > Logika Bisnis
Controller(Proses) -- 
    > Perantara antara Model dan View
    > Menangani Pemrosesan pada aplikasi
    > Menangani Aksi dari user
View(Tampilan) --
    > Output
    > Representasi visual dari model
    > Tampilan 

Kenapa MVC?
    > Organisasi dan Struktur kode yang baik.
    > Pemisah Logic dan Tampilan.
    > Mempermudah dalam Maintenance Code.
    > Mengimplementasi Konsep OOP.
    > Digunakan oleh Web Application Framework.


#2 Persiapan ===========================
Membuat sebuah folder Public (untuk menyimpan css, js dan image).
    > membuat file utama yang akan diakses oleh user - index.php

Membuat sebuah folder App 
    > folder core (sebagai inti dari mvc - membuat file untuk mengelola routing)
        > membuat file App.php dan Controller.php
    > folder controllers
    > folder views (berisi antarmuka yang akan disajikan oleh controllers)
        membuat sub folder lagi untuk menyimpan kumpulan kumpulan views sesuai dengan controller yg memanggilnya nanti
        > folder home
        > membuat file init.php sebagai file bootstraping
    > folder models


*class yang ada di dalam Folder controllers akan extends ke class Controller.php


#3 Routing ===========================

Melakukan konfigurasi url menggunakan file .htaccess
htaccess adalah file untuk memodifikasi konfigurasi dari server apache (dapat dilakukan perfolder).
Membuat file .htaccess untuk folder app dan public

Memecah url menjadi array dan mengahpus / terakhir


#4 Controller ===========================

membuat property default di App.php
membuat class Home.php dan About.php di controllers dan membuat Class beserta Method default

di dalam App membuat controller dan method default.
dan melakukan sesuatu jika parameter kosong, hingga mengambil data di url untuk menangkap parameternya.


#5 View ===========================

Akan merubah isi dari tiap tiap method di controllernya (About.php & Home.php)
yang akan memanggil folder views

Menggunakan Controller.php sebagai fungsi untuk mengirimkan url dan memanggil views
sekarang tiap class About dan Home menjadi child class dari Controller dan akan menerima data

Class About dan Home akan memanggil Method view di Controller.php dan akan menampilkan halaman html untuk about dan home sekalian juga mengirimkan data ke halaman tersebut.
Di folder about dan home dalam views akan menerima data dan menampilkan tampilan utama halaman tersebut.

Memisahkan header dan footer di setiap halamannya agar tidak melakukan perulangan code.


#6 Assets ===========================

Download Bootstrap(Css & Js) dan pindahkan ke folder Public.
Memanggil assets dari css dan js di bootstrap

Membuat constanta di dalam folder core untuk menyimpan
http://localhost/BelajarPHP/mvcPhp/assets_6/public

merubah tampilan dari halaman home dan about


#7 Model ===========================
Mendapatkan data tidak dari url http://localhost/BelajarPHP/mvcPhp/assets_6/public/about/Izuchii/Mahasiswa
tetapi mendapatkan data melalui model

Model isinya tidak hanya data, bisa berisi object domain, service, data mapper (intinya bisnis logic yang akan dibuat).

Memanggil model di Home.php 
dan membuat file User_model.php dimana akan mengirimkan data ke halaman Home.php

Membuat file dan folder baru mahasiswa untuk halaman mahasiswa
Membuat Mahasiswa_model dan memanggil data dari modelnya di controllers mahasiswa.

Melakukan connect ke database untuk mahasiswa_model dan menampilkan data dari database phpmvc


#8 Database Wrapper ===========================

Akan Membungkus Database di dalam sebuah Class Khusus.

Membuat sebuah folder di app sebagai konfigurasi dari mysql.
di dalamnya membuat juga file config.php yang isinya Data Data dari database berupa Konstanta(define).

Isi dari file constants.php yaitu
define('BASEURL', 'http://localhost/BelajarPHP/mvcPhp/database_wrapper_8/public');
pindahkan ke config dan hapus file constants.phpnya 

membuat file baru di dalam corenya yaitu database.php
pindahkan construct dari Model Mahasiswa ke Database.php di core

Sebelum digunakan di model mahasiswanya Databasenya harus di load terlebih dahulu.
menampilkan data ke halaman index, dan juga membuat halaman baru yaitu detail


#9 Insert Data ===========================

Akan melakukan CRUD dan menggunakan Modal Box dari Bootstrap 4

Melakukan editing pada halaman mahasiswa/index dengan membuat button dan modal box.
Di dalam modal box membuat sebuah form yang akan mengirimkan data.

Data akan di kirimkan ke halaman mahasiswa/tambah dengan menjalakankan method untuk tambahDataMahasiswa() dan jika ada data yg dirikimkan atau ditambahkan ke baris baru yang ada di database maka kembalikan user ke halaman indexnya.
Di dalam model, Mahasiswa_model membuat model untuk melakukan query data ke database, Dan dapat mengirimkan nilai.
Agar dapat mengirimkan nilai maka mahasiswa_model memanggil method rowCount() dari folder core yaitu Database.php yang berfungsi untuk mengembalikan nilai apabila ada baris baru yang ditambahkan.


#10 Flash Message ===========================

Membuat pesan kilat, yang akan menampilkan sesuatu ketika kita telah selesai mengerjakan suatu aksi di dalam CRUD MVC.
Dalam membuat flash message akan membutuhkan sebuah konsep $_SESSION.

Membuat Class baru di dalam sebuah Folder Core, untuk menangani Flash Message.
Di dalam class Flasher membuat 2 buat method 1 untuk melakukan setFlasher 1 lagi utuk menampilkan Flashernya jika dipanggil.

Agar Flashernya jalan panggil Flasher di file init. dan di file public di halaman Indexnya set Session_start agar session sudah dapat digunakan.

Kemudian di function tambah di dalam controllers - Mahasiswa.php
lakukan setFlashernya ketika insert data success dan lakukan juga flasher ketika set data Gagal.